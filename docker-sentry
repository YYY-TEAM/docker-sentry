#!/bin/bash

# Sentry on docker (CentOS) fully automated install script.
# Author Sebastian Sasu <sebi@nologin.ro>

# Docker engine and kernel 4.x must be installed on the host.
# Please refer to scripts/docker-install.sh script and
# scripts/centos-elrepo.sh

# Install etcd

centos_etcd() {
  sudo yum -y install git etcd3 \
    && sudo systemctl enable etcd \
    && sudo systemctl start etcd || exit 0
}

ubuntu_etcd() {
  sudo apt-get -y update \
    && sudo apt-get -y install etcd \
    && sudo systemctl enable etcd \
    && sudo systemctl start etcd || exit 0
}

debian_etcd() {
  wget https://github.com/coreos/etcd/releases/download/v2.3.8/etcd-v2.3.8-linux-amd64.tar.gz \
    && tar zxvf etcd-v2.3.8-linux-amd64.tar.gz && cd etcd-v2.3.8-linux-amd64 \
    && sudo bash -c 'cp etcd* /usr/bin/' && cd .. \
    && rm -rf etcd-v2.3.8* || exit 0

  sudo bash -c 'cat <<EOF > /etc/systemd/system/etcd.service
  [Unit]
  Description=etcd - highly-available key value store
  Documentation=https://github.com/coreos/etcd
  Documentation=man:etcd
  After=network.target
  Wants=network-online.target

  [Service]
  Environment=DAEMON_ARGS=
  Environment=ETCD_NAME=%H
  Environment=ETCD_DATA_DIR=/var/lib/etcd/default
  EnvironmentFile=-/etc/default/%p
  Type=notify
  User=etcd
  PermissionsStartOnly=true
  #ExecStart=/bin/sh -c "GOMAXPROCS=$(nproc) /usr/bin/etcd $DAEMON_ARGS"
  ExecStart=/usr/bin/etcd $DAEMON_ARGS
  Restart=on-abnormal
  #RestartSec=10s
  LimitNOFILE=65536

  [Install]
  WantedBy=multi-user.target
  Alias=etcd2.service

EOF'

# Enable etcd, add user for it and start it
sudo systemctl enable etcd
sudo adduser --system --home /var/lib/etcd --shell /bin/false --disabled-password --disabled-login etcd
sudo systemctl start etcd
}

echo -e "\n"
echo -e "My Operating System is \033[1m(c)\033[0mentOS/\033[1m(d)\033[0mebian/\033[1m(u)\033[0mbuntu: \n"

read -r os

if [[ "$os" == "c" ]]; then
  echo -e "\033[1mInstalling ETCD on CentOS...\033[0m\n"
  centos_etcd
elif [[ "$os" == "d" ]]; then
    echo -e "\033[1mInstalling ETCD on Debian...\033[0m\n"
    debian_etcd
elif [[ "$os" == "u" ]]; then
    echo -e "\033[1mInstalling ETCD on Ubuntu...\033[0m\n"
    ubuntu_etcd
else "Your OS is something that we don't support in this script. Please create a pull request..."
  exit 0
fi


sudo mkdir -p /opt/sentry/{postgres,redis,sentry}
sudo mkdir -p /opt/nginx/certs

# Set environment variables for your containers in etcd
etcdctl set /sentry/POSTGRES_PASSWORD pa$$word
etcdctl set /sentry/POSTGRES_USER sentry
etcdctl set /sentry/PGDATA /var/lib/postgresql/data/pgdata
etcdctl set /sentry/PG_DIR /opt/sentry/postgres
etcdctl set /sentry/REDIS_DIR /opt/sentry/redis
etcdctl set /sentry/SENTRY_DIR /opt/sentry/sentry
etcdctl set /sentry/SENTRY_SINGLE_ORGANIZATION False
etcdctl set /sentry/SENTRY_SERVER_EMAIL sentry@example.com
etcdctl set /sentry/SENTRY_EMAIL_HOST smtp.example.com
etcdctl set /sentry/SENTRY_EMAIL_PASSWORD super-secret
etcdctl set /sentry/SENTRY_EMAIL_USER mailuser
etcdctl set /sentry/SENTRY_EMAIL_PORT 587
etcdctl set /sentry/SENTRY_EMAIL_USE_TLS True
etcdctl set /sentry/SENTRY_REDIS_HOST redis
etcdctl set /sentry/SENTRY_POSTGRES_HOST postgres
etcdctl set /sentry/VIRTUAL_HOST sentry.example.com
etcdctl set /sentry/LETSENCRYPT_HOST sentry.example.com
etcdctl set /sentry/LETSENCRYPT_EMAIL example@example.com
etcdctl set /nginx/WORKDIR /opt/nginx

# Create an isolated docker network (bridge) It will automatically perform DNS resolution
docker network create -d bridge --subnet 172.25.0.0/16 sentry_net

# Start redis and postgresql containers
docker run -d --name redis --restart=always --network=sentry_net \
  --sysctl=net.core.somaxconn=65535 \
  -v $(etcdctl get /sentry/REDIS_DIR):/data \
  redis:alpine

docker run -d --name postgres --restart=always --network=sentry_net \
  -e POSTGRES_PASSWORD=$(etcdctl get /sentry/POSTGRES_PASSWORD) \
  -e POSTGRES_USER=$(etcdctl get /sentry/POSTGRES_USER) \
  -e PGDATA=$(etcdctl get /sentry/PGDATA) \
  -v $(etcdctl get /sentry/PG_DIR):/var/lib/postgresql/data/pgdata \
  postgres

sleep 10

# Generate sentry key & add it to etcd
etcdctl set /sentry/SENTRY_SECRET_KEY "$(docker run --rm sentry config generate-secret-key)"

# Upgrade database
docker run -it --rm --network=sentry_net \
  -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
  -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
  -e SENTRY_POSTGRES_HOST=$(etcdctl get /sentry/SENTRY_POSTGRES_HOST) \
  -e SENTRY_REDIS_HOST=$(etcdctl get /sentry/SENTRY_REDIS_HOST) \
  -e SENTRY_DB_USER=$(etcdctl get /sentry/POSTGRES_USER) \
  -e SENTRY_DB_PASSWORD=$(etcdctl get /sentry/POSTGRES_PASSWORD) \
  sentry upgrade

# Create user in case you didn't on the previous step
# docker run -it --rm \
#   -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
#   -e SENTRY_POSTGRES_HOST=postgres \
#   -e SENTRY_REDIS_HOST=redis \
#   sentry createuser

# Start sentry
docker run -d --restart=always --network=sentry_net \
  --name sentry \
  -e VIRTUAL_HOST=$(etcdctl get /sentry/VIRTUAL_HOST) \
  -e LETSENCRYPT_HOST=$(etcdctl get /sentry/LETSENCRYPT_HOST) \
  -e LETSENCRYPT_EMAIL=$(etcdctl get /sentry/LETSENCRYPT_EMAIL) \
  -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
  -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
  -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
  -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
  -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
  -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
  -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
  -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
  -e SENTRY_POSTGRES_HOST=$(etcdctl get /sentry/SENTRY_POSTGRES_HOST) \
  -e SENTRY_REDIS_HOST=$(etcdctl get /sentry/SENTRY_REDIS_HOST) \
  -e SENTRY_DB_USER=$(etcdctl get /sentry/POSTGRES_USER) \
  -e SENTRY_DB_PASSWORD=$(etcdctl get /sentry/POSTGRES_PASSWORD) \
  -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
  sentry

# Start sentry cron
docker run -d --name sentry-cron --restart=always  --network=sentry_net \
  -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
  -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
  -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
  -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
  -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
  -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
  -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
  -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
  -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
  -e SENTRY_POSTGRES_HOST=$(etcdctl get /sentry/SENTRY_POSTGRES_HOST) \
  -e SENTRY_REDIS_HOST=$(etcdctl get /sentry/SENTRY_REDIS_HOST) \
  -e SENTRY_DB_USER=$(etcdctl get /sentry/POSTGRES_USER) \
  -e SENTRY_DB_PASSWORD=$(etcdctl get /sentry/POSTGRES_PASSWORD) \
  sentry run cron


# Start 3 workers
for i in 1 2 3; do
docker run -d --name sentry-worker-${i} --restart=always --network=sentry_net \
  -v $(etcdctl get /sentry/SENTRY_DIR):/var/lib/sentry/files \
  -e SENTRY_SECRET_KEY=$(etcdctl get /sentry/SENTRY_SECRET_KEY) \
  -e SENTRY_SINGLE_ORGANIZATION=$(etcdctl get /sentry/SENTRY_SINGLE_ORGANIZATION) \
  -e SENTRY_SERVER_EMAIL=$(etcdctl get /sentry/SENTRY_SERVER_EMAIL) \
  -e SENTRY_EMAIL_HOST=$(etcdctl get /sentry/SENTRY_EMAIL_HOST) \
  -e SENTRY_EMAIL_PASSWORD=$(etcdctl get /sentry/SENTRY_EMAIL_PASSWORD) \
  -e SENTRY_EMAIL_USER=$(etcdctl get /sentry/SENTRY_EMAIL_USER) \
  -e SENTRY_EMAIL_PORT=$(etcdctl get /sentry/SENTRY_EMAIL_PORT) \
  -e SENTRY_EMAIL_USE_TLS=$(etcdctl get /sentry/SENTRY_EMAIL_USE_TLS) \
  -e SENTRY_POSTGRES_HOST=$(etcdctl get /sentry/SENTRY_POSTGRES_HOST) \
  -e SENTRY_REDIS_HOST=$(etcdctl get /sentry/SENTRY_REDIS_HOST) \
  -e SENTRY_DB_USER=$(etcdctl get /sentry/POSTGRES_USER) \
  -e SENTRY_DB_PASSWORD=$(etcdctl get /sentry/POSTGRES_PASSWORD) \
  sentry run worker
done

echo -e "Installing nginx reverse proxy with SSL support...\n"
sleep 10

$HOME/docker-sentry/nginx-proxy.sh
